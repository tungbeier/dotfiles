#!/usr/bin/env bash
#===============================================================================
#
#          FILE: generate-git-aliases.sh
#
#         USAGE: ./generate-git-aliases.sh
#
#   DESCRIPTION: Generate a zsh config file contains git aliases from the
#                git global config file.
#
#  REQUIREMENTS: md5sum
#        AUTHOR: tung beier
#       CREATED: 20 August 2019 20:18 CEST
#===============================================================================

set -o errexit  # Exit when a command fails
                # Use || true if a command is allowed to fail
set -o nounset  # Treat unset variables as an error
set -o pipefail # Exit when a command in a pipeline fails

#---  GLOBAL VARIABLES  --------------------------------------------------------
readonly GIT_CONFIG_FILE=$HOME/.gitconfig


#---  FUNCTION  ----------------------------------------------------------------
#          NAME: checkGitConfig
#   DESCRIPTION: check whether the global git config file has changed and the
#                git alias file has to be re-/generate
#       RETURNS: NO-DOING = if the git config file has not changed
#                GENERATE = if the git config file has never been checked
#                           or it has changed
#-------------------------------------------------------------------------------
_checkGitConfig() {
  local checksum_folder=$HOME/.config/checksums/
  if [[ ! -d "$checksum_folder" ]]; then
    mkdir -p "$checksum_folder"
  fi

  local checksum_file=$checksum_folder/git-config-checksum.md5

  if [[ ! -f "$checksum_file" ]]; then
    touch "$checksum_file"
    md5sum "$GIT_CONFIG_FILE" > "$checksum_file"
    echo 'GENERATE'
  else
    local check_result=$(md5sum -c --quiet "$checksum_file" 2> /dev/null)

    if [[ -z "$check_result" ]]; then
      echo 'NO-DOING'
    else
      md5sum "$GIT_CONFIG_FILE" > "$checksum_file"
      echo 'GENERATE'
    fi
  fi
}


#---  FUNCTION  ----------------------------------------------------------------
#          NAME: generateAliasFile
#   DESCRIPTION: generate and fill the zsh alias file with git aliases
#-------------------------------------------------------------------------------
_generateAliasFile() {
  local alias_file=$HOME/.config/alias/git.zsh

  if [[ ! -f "$alias_file" ]]; then
    touch "$alias_file"
  fi

  cat <<EOF > "$alias_file"
#
# Generated by generate-git-aliases.sh
# on the `date '+%d %B %Y %H:%M %Z'`
#
alias g='git'
alias dot="git --git-dir=\$HOME/dotfiles --work-tree=\$HOME"
alias gup="git remote update -p && git merge --ff-only @{u}"

EOF

  local marker=0
  local aliasModuleRegex="^\[alias\]$"
  local otherModulesRegex="^\[\w+\]$"
  local specialAliases="^up=.+$"

  while read -r line; do
    if [[ -z "$line" ]]; then
      continue
    fi

    if [[ $line =~ $aliasModuleRegex ]]; then
      # Found the alias config
      marker=1
    fi

    if [[ "$marker" -eq 1 ]] \
      && [[ ! $line =~ $aliasModuleRegex ]] \
      && [[ $line =~ $otherModulesRegex ]]; then
      # Find the next module config
      break
    fi

    if [[ "$marker" -eq 1 ]]; then
      local lineWithoutFirstSpace="${line/ /}"

      if [[ $line =~ $aliasModuleRegex ]] \
        || [[ $lineWithoutFirstSpace =~ $specialAliases ]]; then
        continue
      fi

      local gitAlias="${lineWithoutFirstSpace/ /\'git }"
      echo "alias g${gitAlias}'" >> "$alias_file"
    fi

  done < "$GIT_CONFIG_FILE"
}


#---  SCRIPT LOGIC  ------------------------------------------------------------
if [[ ! -f "${GIT_CONFIG_FILE}" ]]; then
  # There is no config file
  return 0
fi

checkGitConfigResult=$(_checkGitConfig)
if [[ "$checkGitConfigResult" == "GENERATE" ]]; then
  _generateAliasFile
fi

